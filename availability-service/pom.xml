<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>
    <groupId>net.alainpham</groupId>
    <artifactId>availability-service</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>
    <name>availability-service</name>
    <description>availability-service</description>

    <properties>
        <camel.version>4.2.0</camel.version>
        <spring.boot.version>3.1.6</spring.boot.version>
        <swagger.codegen.version>3.0.51</swagger.codegen.version>
        <springdoc.openapi.version>2.2.0</springdoc.openapi.version>
        <cxf.codegen.plugin.version>4.0.3</cxf.codegen.plugin.version>
        <opentelemetry.version>1.32.0</opentelemetry.version>
        <temurin.image.version>17.0.9_9-jre</temurin.image.version>
        <java.run.version>1.3.8</java.run.version>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.target>17</maven.compiler.target>
        <maven.compiler.source>17</maven.compiler.source>
        <maven-compiler-plugin.version>3.11.0</maven-compiler-plugin.version>
        <exec-maven-plugin.version>3.1.1</exec-maven-plugin.version>

        <container.registry>alainpham</container.registry>
        <kube.ingress.root.domain>vrbx.duckdns.org</kube.ingress.root.domain>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- Spring Boot BOM -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- Camel BOM -->
            <dependency>
                <groupId>org.apache.camel.springboot</groupId>
                <artifactId>camel-spring-boot-dependencies</artifactId>
                <version>${camel.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>


    <dependencies>
        <!-- base -->
        <dependency>
            <groupId>org.apache.camel.springboot</groupId>
            <artifactId>camel-spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-undertow</artifactId>
        </dependency>

        <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-websocket</artifactId>
		</dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <dependency>
			<groupId>org.apache.camel.springboot</groupId>
			<artifactId>camel-platform-http-starter</artifactId>
		</dependency>

        <!-- activate JMX metrics for camel -->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-management</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-xml-io-dsl</artifactId>
        </dependency>

        <!-- observability with otel -->
        <dependency>
            <groupId>io.opentelemetry.javaagent</groupId>
            <artifactId>opentelemetry-javaagent</artifactId>
            <version>${opentelemetry.version}</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.camel.springboot</groupId>
            <artifactId>camel-opentelemetry-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
            </dependency>
            
        <dependency>
            <groupId>org.apache.camel.springboot</groupId>
            <artifactId>camel-micrometer-starter</artifactId>
        </dependency>

        <!-- autoreload on changes -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
            <scope>runtime</scope>
        </dependency>

        <!-- Swagger support for restdsl -->
        <dependency>
            <groupId>org.apache.camel.springboot</groupId>
            <artifactId>camel-openapi-java-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>${springdoc.openapi.version}</version>
        </dependency>

        <!-- parsing rendering support -->
        <dependency>
            <groupId>org.apache.camel.springboot</groupId>
            <artifactId>camel-jackson-starter</artifactId>
        </dependency>
        <!-- calling rest services through http4 -->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-http</artifactId>
        </dependency>
        <!--Camel Servlet starter -->
        <dependency>
            <groupId>org.apache.camel.springboot</groupId>
            <artifactId>camel-servlet-starter</artifactId>
        </dependency>


        <!--For database access -->
        <dependency>
            <groupId>org.apache.camel.springboot</groupId>
            <artifactId>camel-sql-starter</artifactId>
        </dependency>

        <!-- for websockets -->
        <dependency>
            <groupId>org.apache.camel.springboot</groupId>
            <artifactId>camel-vertx-websocket-starter</artifactId>
        </dependency>

        <!-- database -->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-rest</artifactId>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId> 
            <artifactId>h2</artifactId>
        </dependency>

        <dependency>
            <groupId>com.martensigwart</groupId>
            <artifactId>fakeload</artifactId>
            <version>0.7.0</version>
          </dependency>
    </dependencies>
    <build>
        <defaultGoal>spring-boot:run</defaultGoal>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring.boot.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <profiles>dev</profiles>
                    <environmentVariables>
                        <JAVA_TOOL_OPTIONS>-javaagent:${user.home}/.m2/repository/io/opentelemetry/javaagent/opentelemetry-javaagent/${opentelemetry.version}/opentelemetry-javaagent-${opentelemetry.version}.jar</JAVA_TOOL_OPTIONS>
                        <OTEL_SDK_DISABLED>true</OTEL_SDK_DISABLED>
                        <OTEL_LOGS_EXPORTER>otlp</OTEL_LOGS_EXPORTER>
                        <OTEL_METRIC_EXPORT_INTERVAL>15000</OTEL_METRIC_EXPORT_INTERVAL>
                        <OTEL_EXPORTER_OTLP_TIMEOUT>10000</OTEL_EXPORTER_OTLP_TIMEOUT>
                        <OTEL_RESOURCE_ATTRIBUTES>service.name=${project.artifactId},service.namespace=${project.artifactId}-ns,service.instance.id=${project.artifactId}-dev,service.version=${project.version}</OTEL_RESOURCE_ATTRIBUTES>
                    </environmentVariables>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>${exec-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <id>rmi</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>docker</executable>
                            <workingDirectory>${project.basedir}</workingDirectory>
                            <arguments>
                                <argument>rmi</argument>
                                <argument>-f</argument>
                                <argument>${project.artifactId}:${project.version}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <!-- docker buildx build -f src/main/docker/Dockerfile.multiarch -t story:1.0-SNAPSHOT . -->
                        <id>build</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>docker</executable>
                            <workingDirectory>${project.basedir}</workingDirectory>
                            <arguments>
                                <argument>buildx</argument>
                                <argument>build</argument>
                                <argument>--progress=plain</argument>
                                <argument>--build-arg</argument>
                                <argument>PROJECT_ARTIFACTID=${project.artifactId}</argument>
                                <argument>--build-arg</argument>
                                <argument>PROJECT_VERSION=${project.version}</argument>
                                <argument>--build-arg</argument>
                                <argument>TEMURIN_IMAGE_VERSION=${temurin.image.version}</argument>
                                <argument>--build-arg</argument>
                                <argument>JAVA_RUN_VERSION=${java.run.version}</argument>
                                <argument>--build-arg</argument>
                                <argument>OPENTELEMETRY_VERSION=${opentelemetry.version}</argument>
                                <argument>-f</argument>
                                <argument>src/main/docker/Dockerfile.multiarch</argument>
                                <argument>-t</argument>
                                <argument>${project.artifactId}:${project.version}</argument>
                                <argument>.</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>tag</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>docker</executable>
                            <workingDirectory>${project.basedir}</workingDirectory>
                            <arguments>
                                <argument>tag</argument>
                                <argument>${project.artifactId}:${project.version}</argument>
                                <argument>${container.registry}/${project.artifactId}:${project.version}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>push</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>docker</executable>
                            <workingDirectory>${project.basedir}</workingDirectory>
                            <arguments>
                                <argument>push</argument>
                                <argument>${container.registry}/${project.artifactId}:${project.version}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>kdelete</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>bash</executable>
                            <workingDirectory>${project.basedir}</workingDirectory>
                            <arguments>
                                <argument>-c</argument>
                                <argument><![CDATA[envsubst < src/main/kube/deploy.envsubst.yaml | kubectl delete -f -]]></argument>
                            </arguments>
                            <environmentVariables>
                                <PROJECT_ARTIFACTID>${project.artifactId}</PROJECT_ARTIFACTID>
                                <PROJECT_VERSION>${project.version}</PROJECT_VERSION>
                                <CONTAINER_REGISTRY>${container.registry}</CONTAINER_REGISTRY>
                                <KUBE_INGRESS_ROOT_DOMAIN>${kube.ingress.root.domain}</KUBE_INGRESS_ROOT_DOMAIN>
                            </environmentVariables>
                        </configuration>
                    </execution>
                    <execution>
                        <id>kdeploy</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>bash</executable>
                            <workingDirectory>${project.basedir}</workingDirectory>
                            <arguments>
                                <argument>-c</argument>
                                <argument><![CDATA[envsubst < src/main/kube/deploy.envsubst.yaml | kubectl apply -f -]]></argument>
                            </arguments>
                            <environmentVariables>
                                <PROJECT_ARTIFACTID>${project.artifactId}</PROJECT_ARTIFACTID>
                                <PROJECT_VERSION>${project.version}</PROJECT_VERSION>
                                <CONTAINER_REGISTRY>${container.registry}</CONTAINER_REGISTRY>
                                <KUBE_INGRESS_ROOT_DOMAIN>${kube.ingress.root.domain}</KUBE_INGRESS_ROOT_DOMAIN>
                            </environmentVariables>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <profiles>
        <!-- generate code from swagger -->
        <profile>
            <id>swaggergen</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.camel</groupId>
                        <artifactId>camel-restdsl-swagger-plugin</artifactId>
                        <version>${camel.version}</version>
                        <executions>
                            <execution>
                                <id>generate-sources</id>
                                <goals>
                                    <goal>generate-xml</goal>
                                </goals>
                                <configuration>
                                    <specificationUri>src/main/resources/api-definitions/basic-api.yaml</specificationUri>
                                    <outputDirectory>src/main/resources/camel-rest</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>openapi-dto</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>io.swagger.codegen.v3</groupId>
                        <artifactId>swagger-codegen-maven-plugin</artifactId>
                        <version>${swagger.codegen.version}</version>
                        <executions>
                            <execution>
                                <id>generate-sources</id>
                                <goals>
                                    <goal>generate</goal>
                                </goals>
                                <configuration>
                                    <inputSpec>src/main/resources/api-definitions/basic-api.yaml</inputSpec>
                                    <language>java</language>
                                    <generateApis>false</generateApis>
                                    <generateSupportingFiles>false</generateSupportingFiles>
                                    <modelPackage>restsvc.model</modelPackage>
                                    <apiPackage>restsvc.api</apiPackage>
                                    <output>${basedir}/src/main/java</output>
                                    <generateApiTests>false</generateApiTests>
                                    <configOptions>
                                        <serializableModel>true</serializableModel>
                                        <sourceFolder>./</sourceFolder>
                                        <library>jersey2</library>
                                        <hideGenerationTimestamp>true</hideGenerationTimestamp>
                                    </configOptions>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

    
    </profiles>
</project>
